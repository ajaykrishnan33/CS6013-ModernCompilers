//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;
import helper.*;
import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class CodeConverter<R, A> implements GJVisitor<R, A> {
    //
    // Auto class visitors--probably don't need to be overridden.
    //
    GlobalSymTab g;
    public CodeConverter(GlobalSymTab gst){
        this.g = gst;
    }

    int temp_max=0;

    String newTemp(){
        String ret = "temp"+temp_max;
        temp_max++;
        return ret;
    }

    public R visit(NodeList n, A argu) {
        R _ret = null;
        int _count = 0;
        ArrayList<String> res = new ArrayList<String>();
        res.add("");
        res.add("");
        for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            R val = e.nextElement().accept(this, argu);
            if(val!=null){
                ArrayList<String> x = (ArrayList<String>)val;
                if(x.get(0)!=null)
                    res.set(0, res.get(0) + x.get(0) + " ");
                if(x.get(1)!=null)
                    res.set(1, res.get(1) + x.get(1));
                _count++;
            }
        }
        if(res.get(0).length()==0)
            res.set(0, null);
        _ret = (R)res;
        return _ret;
    }

    public R visit(NodeListOptional n, A argu) {
        if ( n.present() ) {
            R _ret = null;
            int _count = 0;
            ArrayList<String> res = new ArrayList<String>();
            res.add("");
            res.add("");
            for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
                R val = e.nextElement().accept(this, argu);
                if(val!=null){
                    ArrayList<String> x = (ArrayList<String>)val;
                    if(x.get(0)!=null)
                        res.set(0, res.get(0) + x.get(0) + " ");
                    if(x.get(1)!=null)
                        res.set(1, res.get(1) + x.get(1));
                    _count++;
                }
            }
            if(res.get(0).length()==0)
                res.set(0, null);
            _ret = (R)res;
            return _ret;
        } else{
            ArrayList<String> x = new ArrayList<String>();
            x.add("");
            x.add("");
            return (R)x;
        }
    }

    public R visit(NodeOptional n, A argu) {
        if ( n.present() )
            return n.node.accept(this, argu);
        else{
            ArrayList<String> x = new ArrayList<String>();
            x.add("");
            x.add("");
            return (R)x;
        }
    }

    public R visit(NodeChoice n, A argu) {
        R _ret = n.choice.accept(this, argu);
        // System.out.println(((ArrayList<String>)_ret).get(0)+" "+((ArrayList<String>)_ret).get(1));
        return _ret;
    }

    public R visit(NodeSequence n, A argu) {
        R _ret = null;
        int _count = 0;
        ArrayList<String> res = new ArrayList<String>();
        res.add("");
        res.add("");
        for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            R val = e.nextElement().accept(this, argu);
            if(val!=null){
                ArrayList<String> x = (ArrayList<String>)val;
                if(x.get(0)!=null)
                    res.set(0, res.get(0) + x.get(0) + " ");
                if(x.get(1)!=null)
                    res.set(1, res.get(1) + x.get(1));
                _count++;
            }
        }
        if(res.get(0).length()==0)
            res.set(0, null);
        _ret = (R)res;
        return _ret;
    }

    public R visit(NodeToken n, A argu) { return null; }

    //
    // User-generated visitor methods below
    //

    /**
     * f0 -> MainClass()
     * f1 -> ( TypeDeclaration() )*
     * f2 -> <EOF>
     */
    public R visit(Goal n, A argu) {
        R _ret = null;
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        n.f2.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> "class"
     * f1 -> Identifier()
     * f2 -> "{"
     * f3 -> "public"
     * f4 -> "static"
     * f5 -> "void"
     * f6 -> "main"
     * f7 -> "("
     * f8 -> "String"
     * f9 -> "["
     * f10 -> "]"
     * f11 -> Identifier()
     * f12 -> ")"
     * f13 -> "{"
     * f14 -> PrintStatement()
     * f15 -> "}"
     * f16 -> "}"
     */
    public R visit(MainClass n, A argu) {
        R _ret = null;
        n.f0.accept(this, argu);
        
        ArrayList<String> id = (ArrayList<String>)n.f1.accept(this, argu);
        g.current_scope = g.getClass(id.get(0));

        System.out.println("class " + id.get(0)+ " {");

        n.f2.accept(this, argu);
        n.f3.accept(this, argu);
        n.f4.accept(this, argu);
        n.f5.accept(this, argu);        
        n.f6.accept(this, argu);

        g.current_scope = ((ClassSymTab)g.current_scope).getMethod("main", g);
        MethodSymTab func = (MethodSymTab)g.current_scope;

        n.f7.accept(this, argu);
        n.f8.accept(this, argu);
        n.f9.accept(this, argu);
        n.f10.accept(this, argu);
        ArrayList<String> arg_id = (ArrayList<String>)n.f11.accept(this, argu);
        n.f12.accept(this, argu);
        n.f13.accept(this, argu);
        ArrayList<String> stmt = (ArrayList<String>)n.f14.accept(this, argu);


        System.out.println("public static void main(String[] " + arg_id.get(0) + "){");
        
        // func.displayEverything();

        for(Map.Entry<String, String> entry: func.inner_variables.entrySet()){
            System.out.println(entry.getValue() + " " + entry.getKey()+";");
        }

        System.out.println(stmt.get(1));
        System.out.println("}");

        n.f15.accept(this, argu);
        n.f16.accept(this, argu);

        System.out.println("}");
        g.current_scope = null;

        return _ret;
    }

    /**
     * f0 -> ClassDeclaration()
     *       | ClassExtendsDeclaration()
     */
    public R visit(TypeDeclaration n, A argu) {
        R _ret = null;
        n.f0.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> "class"
     * f1 -> Identifier()
     * f2 -> "{"
     * f3 -> ( VarDeclaration() )*
     * f4 -> ( MethodDeclaration() )*
     * f5 -> "}"
     */
    public R visit(ClassDeclaration n, A argu) {
        R _ret = null;
        n.f0.accept(this, argu);
        ArrayList<String> id = (ArrayList<String>)n.f1.accept(this, argu);
        g.current_scope = g.getClass(id.get(0));
        n.f2.accept(this, argu);
        n.f3.accept(this, argu);

        System.out.println("class " + id.get(0)+ " {");

        for(Map.Entry<String, String> entry: g.current_scope.variables.entrySet()){
            System.out.println(entry.getValue() + " " + entry.getKey() + ";");
        }

        n.f4.accept(this, argu); // print methods

        System.out.println("}");

        n.f5.accept(this, argu);

        g.current_scope = null;

        return _ret;
    }

    /**
     * f0 -> "class"
     * f1 -> Identifier()
     * f2 -> "extends"
     * f3 -> Identifier()
     * f4 -> "{"
     * f5 -> ( VarDeclaration() )*
     * f6 -> ( MethodDeclaration() )*
     * f7 -> "}"
     */
    public R visit(ClassExtendsDeclaration n, A argu) {
        R _ret = null;
        n.f0.accept(this, argu);
        ArrayList<String> id = (ArrayList<String>)n.f1.accept(this, argu);
        g.current_scope = g.getClass(id.get(0));
        n.f2.accept(this, argu);
        ArrayList<String> extends_id = (ArrayList<String>)n.f3.accept(this, argu);
        n.f4.accept(this, argu);
        // n.f5.accept(this, argu);
        
        System.out.println("class " + id.get(0)+ " extends " + extends_id.get(0) + " {");

        for(Map.Entry<String, String> entry: g.current_scope.variables.entrySet()){
            System.out.println(entry.getValue() + " " + entry.getKey() + ";");
        }

        n.f6.accept(this, argu); // print methods

        System.out.println("}");
        
        n.f7.accept(this, argu);

        g.current_scope = null;

        return _ret;
    }

    /**
     * f0 -> Type()
     * f1 -> Identifier()
     * f2 -> ";"
     */
    public R visit(VarDeclaration n, A argu) {
        R _ret = null;
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        n.f2.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> "public"
     * f1 -> Type()
     * f2 -> Identifier()
     * f3 -> "("
     * f4 -> ( FormalParameterList() )?
     * f5 -> ")"
     * f6 -> "{"
     * f7 -> ( VarDeclaration() )*
     * f8 -> ( Statement() )*
     * f9 -> "return"
     * f10 -> Expression()
     * f11 -> ";"
     * f12 -> "}"
     */
    public R visit(MethodDeclaration n, A argu) {
        R _ret = null;
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        ArrayList<String> id = (ArrayList<String>)n.f2.accept(this, argu);

        g.current_scope = ((ClassSymTab)g.current_scope).getMethod(id.get(0), g);
        MethodSymTab func = (MethodSymTab)g.current_scope;

        n.f3.accept(this, argu);        
        n.f5.accept(this, argu);
        n.f6.accept(this, argu);
        n.f7.accept(this, argu);
        ArrayList<String> stmts = (ArrayList<String>)n.f8.accept(this, argu);
        n.f9.accept(this, argu);
        ArrayList<String> exp = (ArrayList<String>)n.f10.accept(this, argu);
        n.f11.accept(this, argu);
        n.f12.accept(this, argu);

        System.out.print("public " + func.return_type + " " + func.block_name + " (" );
        n.f4.accept(this, argu); // print parameter list
        System.out.print(" ){\n");
        for(Map.Entry<String, String> entry: func.inner_variables.entrySet()){
            System.out.println(entry.getValue() + " " + entry.getKey()+";");
        }

        System.out.println(stmts.get(1));
        System.out.println(exp.get(1));
        System.out.println("return " + exp.get(0)+";\n}");

        g.current_scope = g.getClass(g.current_scope.parent);

        return _ret;
    }

    /**
     * f0 -> FormalParameter()
     * f1 -> ( FormalParameterRest() )*
     */
    public R visit(FormalParameterList n, A argu) {
        R _ret = null;
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> Type()
     * f1 -> Identifier()
     */
    public R visit(FormalParameter n, A argu) {
        R _ret = null;
        n.f0.accept(this, argu);
        ArrayList<String> x =  (ArrayList<String>)n.f1.accept(this, argu);
        String type = ((MethodSymTab)g.current_scope).parameter_variables.get(x.get(0));
        System.out.print(type + " " + x.get(0));
        return _ret;
    }

    /**
     * f0 -> ","
     * f1 -> FormalParameter()
     */
    public R visit(FormalParameterRest n, A argu) {
        R _ret = null;
        n.f0.accept(this, argu);
        System.out.print(", ");
        n.f1.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> ArrayType()
     *       | BooleanType()
     *       | IntegerType()
     *       | Identifier()
     */
    public R visit(Type n, A argu) {
        R _ret = null;
        n.f0.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> "int"
     * f1 -> "["
     * f2 -> "]"
     */
    public R visit(ArrayType n, A argu) {
        R _ret = null;
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        n.f2.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> "boolean"
     */
    public R visit(BooleanType n, A argu) {
        R _ret = null;
        n.f0.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> "int"
     */
    public R visit(IntegerType n, A argu) {
        R _ret = null;
        n.f0.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> Block()
     *       | AssignmentStatement()
     *       | ArrayAssignmentStatement()
     *       | FieldAssignmentStatement()
     *       | IfStatement()
     *       | WhileStatement()
     *       | ForStatement()
     *       | PrintStatement()
     */
    public R visit(Statement n, A argu) {
        R _ret = null;
        _ret = n.f0.choice.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> "{"
     * f1 -> ( Statement() )*
     * f2 -> "}"
     */
    public R visit(Block n, A argu) {
        R _ret = null;
        n.f0.accept(this, argu);
        _ret = n.f1.accept(this, argu);
        n.f2.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> Identifier()
     * f1 -> "="
     * f2 -> Expression()
     * f3 -> ";"
     */
    public R visit(AssignmentStatement n, A argu) {
        R _ret = null;
        ArrayList<String> id = (ArrayList<String>)n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        ArrayList<String> expr = (ArrayList<String>)n.f2.accept(this, argu);
        n.f3.accept(this, argu);

        ArrayList<String> x = new ArrayList<String>();
        x.add(null);
        x.add(
            expr.get(1)+
            id.get(0)+" = "+expr.get(0)+";\n"
        );

        // System.err.println("Pahuncha kya?");

        _ret = (R)x;
        return _ret;
    }

    /**
     * f0 -> Identifier()
     * f1 -> "["
     * f2 -> Expression()
     * f3 -> "]"
     * f4 -> "="
     * f5 -> Expression()
     * f6 -> ";"
     */
    public R visit(ArrayAssignmentStatement n, A argu) {
        R _ret = null;
        ArrayList<String> id = (ArrayList<String>)n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        ArrayList<String> expr1 = (ArrayList<String>)n.f2.accept(this, argu);
        n.f3.accept(this, argu);
        n.f4.accept(this, argu);
        ArrayList<String> expr2 = (ArrayList<String>)n.f5.accept(this, argu);
        n.f6.accept(this, argu);

        ArrayList<String> x = new ArrayList<String>();
        x.add(null);
        x.add(
            expr1.get(1)+
            expr2.get(1)+
            id.get(0)+"["+expr1.get(0)+"] = " + expr2.get(0) + ";\n"
        );
        _ret = (R)x;

        return _ret;
    }

    /**
     * f0 -> Expression()
     * f1 -> "."
     * f2 -> Identifier()
     * f3 -> "="
     * f4 -> Expression()
     * f5 -> ";"
     */
    public R visit(FieldAssignmentStatement n, A argu) {
        R _ret = null;
        ArrayList<String> expr1 = (ArrayList<String>)n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        ArrayList<String> id = (ArrayList<String>)n.f2.accept(this, argu);
        n.f3.accept(this, argu);
        ArrayList<String> expr2 = (ArrayList<String>)n.f4.accept(this, argu);
        n.f5.accept(this, argu);

        ArrayList<String> x = new ArrayList<String>();
        x.add(null);
        x.add(
            expr1.get(1)+
            expr2.get(1)+
            expr1.get(0)+"."+id.get(0)+" = "+expr2.get(0)+";\n"
        );
        _ret = (R)x;

        return _ret;
    }

    /**
     * f0 -> "if"
     * f1 -> "("
     * f2 -> Expression()
     * f3 -> ")"
     * f4 -> Statement()
     * f5 -> "else"
     * f6 -> Statement()
     */
    public R visit(IfStatement n, A argu) {
        R _ret = null;
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        ArrayList<String> exp = (ArrayList<String>)n.f2.accept(this, argu);
        n.f3.accept(this, argu);
        ArrayList<String> stmt1 = (ArrayList<String>)n.f4.accept(this, argu);
        n.f5.accept(this, argu);
        ArrayList<String> stmt2 = (ArrayList<String>)n.f6.accept(this, argu);

        ArrayList<String> x = new ArrayList<String>();
        x.add(null);
        x.add(
            exp.get(1)+
            "if("+exp.get(0)+"){\n"+
                stmt1.get(1)+
            "}\n"+
            "else{\n"+
                stmt2.get(1)+
            "}\n"
        );

        _ret = (R)x;

        return _ret;
    }

    /**
     * f0 -> "while"
     * f1 -> "("
     * f2 -> Expression()
     * f3 -> ")"
     * f4 -> Statement()
     */
    public R visit(WhileStatement n, A argu) {
        R _ret = null;
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        ArrayList<String> exp = (ArrayList<String>)n.f2.accept(this, argu);
        n.f3.accept(this, argu);
        ArrayList<String> stmt = (ArrayList<String>)n.f4.accept(this, argu);

        ArrayList<String> x = new ArrayList<String>();
        x.add(null);
        x.add(
            exp.get(1)+
            "while("+exp.get(0)+"){\n"+
            stmt.get(1)+
            exp.get(1)+
            "}\n"
        );

        _ret = (R)x;

        return _ret;
    }

    /**
     * f0 -> "for"
     * f1 -> "("
     * f2 -> Identifier()
     * f3 -> "="
     * f4 -> Expression()
     * f5 -> ";"
     * f6 -> Expression()
     * f7 -> ";"
     * f8 -> Identifier()
     * f9 -> "="
     * f10 -> Expression()
     * f11 -> ")"
     * f12 -> Statement()
     */
    public R visit(ForStatement n, A argu) {
        R _ret = null;
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        ArrayList<String> id1 = (ArrayList<String>)n.f2.accept(this, argu);
        n.f3.accept(this, argu);
        ArrayList<String> expr1 = (ArrayList<String>)n.f4.accept(this, argu);
        n.f5.accept(this, argu);
        ArrayList<String> expr2 = (ArrayList<String>)n.f6.accept(this, argu);
        n.f7.accept(this, argu);
        ArrayList<String> id2 = (ArrayList<String>)n.f8.accept(this, argu);
        n.f9.accept(this, argu);
        ArrayList<String> expr3 = (ArrayList<String>)n.f10.accept(this, argu);
        n.f11.accept(this, argu);
        ArrayList<String> stmt = (ArrayList<String>)n.f12.accept(this, argu);

        ArrayList<String> x = new ArrayList<String>();

        x.add(null);

        x.add(
            expr1.get(1)+
            id1.get(0)+" = "+expr1.get(0)+";\n"+
            expr2.get(1)+
            "while("+expr2.get(0)+"){\n"+
                stmt.get(1)+
                expr3.get(1)+
                id2.get(0)+" = "+expr3.get(0)+";\n"+
                expr2.get(1)+
            "}\n"
        );

        _ret = (R)x;

        return _ret;
    }

    /**
     * f0 -> "System.out.println"
     * f1 -> "("
     * f2 -> Expression()
     * f3 -> ")"
     * f4 -> ";"
     */
    public R visit(PrintStatement n, A argu) {
        R _ret = null;
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        ArrayList<String> exp = (ArrayList<String>)n.f2.accept(this, argu);
        n.f3.accept(this, argu);
        n.f4.accept(this, argu);

        // System.err.println("Pahuncha kya");

        ArrayList<String> x = new ArrayList<String>();
        x.add(null);
        x.add(exp.get(1)+"System.out.println("+exp.get(0)+");\n");

        _ret = (R)x;

        return _ret;
    }

    /**
     * f0 -> AndExpression()
     *       | CompareExpression()
     *       | PlusExpression()
     *       | MinusExpression()
     *       | TimesExpression()
     *       | ArrayLookup()
     *       | ArrayLength()
     *       | MessageSend()
     *       | PrimaryExpression()
     */
    public R visit(Expression n, A argu) {
        R _ret = null;
        _ret = n.f0.choice.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> PrimaryExpression()
     * f1 -> "&"
     * f2 -> PrimaryExpression()
     */
    public R visit(AndExpression n, A argu) {
        R _ret = null;
        ArrayList<String> pexp1 = (ArrayList<String>)n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        ArrayList<String> pexp2 = (ArrayList<String>)n.f2.accept(this, argu);

        ArrayList<String> x = new ArrayList<String>();

        String var = this.newTemp();

        x.add(var);

        String statements = pexp1.get(1)+pexp2.get(1);
        statements = statements + var + " = " + pexp1.get(0) + " & " + pexp2.get(0) +";\n";
        x.add(statements);

        g.current_scope.putVariable(var, "boolean");

        _ret = (R)x;

        return _ret;
    }

    /**
     * f0 -> PrimaryExpression()
     * f1 -> "<"
     * f2 -> PrimaryExpression()
     */
    public R visit(CompareExpression n, A argu) {
        R _ret = null;
        ArrayList<String> pexp1 = (ArrayList<String>)n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        ArrayList<String> pexp2 = (ArrayList<String>)n.f2.accept(this, argu);

        ArrayList<String> x = new ArrayList<String>();

        String var = this.newTemp();

        x.add(var);

        String statements = pexp1.get(1)+pexp2.get(1);
        statements = statements + var + " = " + pexp1.get(0) + " < " + pexp2.get(0) +";\n";
        x.add(statements);

        g.current_scope.putVariable(var, "boolean");

        _ret = (R)x;

        return _ret;
    }

    /**
     * f0 -> PrimaryExpression()
     * f1 -> "+"
     * f2 -> PrimaryExpression()
     */
    public R visit(PlusExpression n, A argu) {
        R _ret = null;
        ArrayList<String> pexp1 = (ArrayList<String>)n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        ArrayList<String> pexp2 = (ArrayList<String>)n.f2.accept(this, argu);

        ArrayList<String> x = new ArrayList<String>();

        String var = this.newTemp();

        x.add(var);

        String statements = pexp1.get(1)+pexp2.get(1);
        statements = statements + var + " = " + pexp1.get(0) + " + " + pexp2.get(0) +";\n";
        x.add(statements);

        g.current_scope.putVariable(var, "int");

        _ret = (R)x;

        return _ret;
    }

    /**
     * f0 -> PrimaryExpression()
     * f1 -> "-"
     * f2 -> PrimaryExpression()
     */
    public R visit(MinusExpression n, A argu) {
        R _ret = null;
        ArrayList<String> pexp1 = (ArrayList<String>)n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        ArrayList<String> pexp2 = (ArrayList<String>)n.f2.accept(this, argu);

        ArrayList<String> x = new ArrayList<String>();

        String var = this.newTemp();

        x.add(var);

        String statements = pexp1.get(1)+pexp2.get(1);
        statements = statements + var + " = " + pexp1.get(0) + " - " + pexp2.get(0) +";\n";
        x.add(statements);

        g.current_scope.putVariable(var, "int");

        _ret = (R)x;

        return _ret;
    }

    /**
     * f0 -> PrimaryExpression()
     * f1 -> "*"
     * f2 -> PrimaryExpression()
     */
    public R visit(TimesExpression n, A argu) {
        R _ret = null;
        ArrayList<String> pexp1 = (ArrayList<String>)n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        ArrayList<String> pexp2 = (ArrayList<String>)n.f2.accept(this, argu);

        ArrayList<String> x = new ArrayList<String>();

        String var = this.newTemp();

        x.add(var);

        String statements = pexp1.get(1)+pexp2.get(1);
        statements = statements + var + " = " + pexp1.get(0) + " * " + pexp2.get(0) +";\n";
        x.add(statements);

        g.current_scope.putVariable(var, "int");

        _ret = (R)x;

        return _ret;
    }

    /**
     * f0 -> PrimaryExpression()
     * f1 -> "["
     * f2 -> PrimaryExpression()
     * f3 -> "]"
     */
    public R visit(ArrayLookup n, A argu) {
        R _ret = null;
        ArrayList<String> pexp1 = (ArrayList<String>)n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        ArrayList<String> pexp2 = (ArrayList<String>)n.f2.accept(this, argu);
        n.f3.accept(this, argu);

        ArrayList<String> x = new ArrayList<String>();

        String var = this.newTemp();
        x.add(var);
        String statements = pexp1.get(1)+pexp2.get(1);

        statements += var + " = " + pexp1.get(0) + "[" + pexp2.get(0) + "];\n";
        x.add(statements);

        g.current_scope.putVariable(var, "int");

        _ret = (R)x;

        return _ret;
    }

    /**
     * f0 -> PrimaryExpression()
     * f1 -> "."
     * f2 -> "length"
     */
    public R visit(ArrayLength n, A argu) {
        R _ret = null;
        ArrayList<String> pexp = (ArrayList<String>)n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        n.f2.accept(this, argu);

        ArrayList<String> x = new ArrayList<String>();

        String var = this.newTemp();
        x.add(var);
        String statements = pexp.get(1);
        statements += var + " = " + pexp.get(0) + ".length;\n";

        x.add(statements);

        g.current_scope.putVariable(var, "int");

        _ret = (R)x;
        return _ret;
    }

    /**
     * f0 -> PrimaryExpression()
     * f1 -> "."
     * f2 -> Identifier()
     * f3 -> "("
     * f4 -> ( ExpressionList() )?
     * f5 -> ")"
     */
    public R visit(MessageSend n, A argu) {
        R _ret = null;
        ArrayList<String> pexp = (ArrayList<String>)n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        ArrayList<String> id = (ArrayList<String>)n.f2.accept(this, argu);
        n.f3.accept(this, argu);
        ArrayList<String> explist = (ArrayList<String>)n.f4.accept(this, argu);
        n.f5.accept(this, argu);

        String var = this.newTemp();
        ArrayList<String> x = new ArrayList<String>();
        x.add(var);
        x.add(pexp.get(1) + explist.get(1) + var + " = " + pexp.get(0) + "." + id.get(0) + "("+explist.get(0)+");\n");
        ClassSymTab cst = g.getClass(g.current_scope.getVariableType(pexp.get(0), g));
        String type = cst.getMethod(id.get(0), g).return_type;
        g.current_scope.putVariable(var, type);

        _ret = (R)x;

        return _ret;
    }

    /**
     * f0 -> Expression()
     * f1 -> ( ExpressionRest() )*
     */
    public R visit(ExpressionList n, A argu) {
        R _ret = null;
        ArrayList<String> e1 = (ArrayList<String>)n.f0.accept(this, argu);
        ArrayList<String> e2 = (ArrayList<String>)n.f1.accept(this, argu);
        ArrayList<String> x = new ArrayList<String>();
        if(e2!=null){
            x.add(e1.get(0)+e2.get(0));
            x.add(e1.get(1)+e2.get(1));
            _ret = (R)x;
        }
        else
        {
            x.add(e1.get(0));
            x.add(e1.get(1));
            _ret = (R)x;
        }
        return _ret;
    }

    /**
     * f0 -> ","
     * f1 -> Expression()
     */
    public R visit(ExpressionRest n, A argu) {
        R _ret = null;
        n.f0.accept(this, argu);
        ArrayList<String> exp = (ArrayList<String>)n.f1.accept(this, argu);
        exp.set(0, ","+exp.get(0));
        _ret = (R)exp;
        return _ret;
    }

    /**
     * f0 -> IntegerLiteral()
     *       | TrueLiteral()
     *       | FalseLiteral()
     *       | Identifier()
     *       | ThisExpression()
     *       | ArrayAllocationExpression()
     *       | AllocationExpression()
     *       | NotExpression()
     *       | BracketExpression()
     */
    public R visit(PrimaryExpression n, A argu) {
        R _ret = null;
        _ret = n.f0.choice.accept(this, argu);
        // System.out.println(((ArrayList<String>)_ret).get(0) + ":\n" + ((ArrayList<String>)_ret).get(1));
        return _ret;
    }

    /**
     * f0 -> <INTEGER_LITERAL>
     */
    public R visit(IntegerLiteral n, A argu) {
        R _ret = null;
        String var = this.newTemp();
        ArrayList<String> x = new ArrayList<String>();
        x.add(var);
        x.add(var+" = "+n.f0.toString()+";\n");
        this.g.current_scope.putVariable(var, "int");
        _ret = (R)x;
        return _ret;
    }

    /**
     * f0 -> "true"
     */
    public R visit(TrueLiteral n, A argu) {
        R _ret = null;
        String var = this.newTemp();
        ArrayList<String> x = new ArrayList<String>();
        x.add(var);
        x.add(var+" = true;\n");
        this.g.current_scope.putVariable(var, "boolean");
        _ret = (R)x;
        return _ret;
    }

    /**
     * f0 -> "false"
     */
    public R visit(FalseLiteral n, A argu) {
        R _ret = null;
        String var = this.newTemp();
        ArrayList<String> x = new ArrayList<String>();
        x.add(var);
        x.add(var+" = false;\n");
        this.g.current_scope.putVariable(var, "boolean");
        _ret = (R)x;
        return _ret;
    }

    /**
     * f0 -> <IDENTIFIER>
     */
    public R visit(Identifier n, A argu) {
        R _ret = null;
        ArrayList<String> x = new ArrayList<String>();
        x.add(n.f0.toString());
        x.add("");
        _ret = (R)x;
        return _ret;
    }

    /**
     * f0 -> "this"
     */
    public R visit(ThisExpression n, A argu) {
        R _ret = null;
        String var = this.newTemp();
        ArrayList<String> x = new ArrayList<String>();
        x.add(var);
        x.add(var+" = this;\n");
        this.g.current_scope.putVariable(var, this.g.current_scope.parent);
        _ret = (R)x;
        return _ret;
    }

    /**
     * f0 -> "new"
     * f1 -> "int"
     * f2 -> "["
     * f3 -> Expression()
     * f4 -> "]"
     */
    public R visit(ArrayAllocationExpression n, A argu) {
        R _ret = null;
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        n.f2.accept(this, argu);
        ArrayList<String> exp = (ArrayList<String>)n.f3.accept(this, argu);
        n.f4.accept(this, argu);

        String var = this.newTemp();
        ArrayList<String> x = new ArrayList<String>();
        x.add(var);
        x.add(exp.get(1) + var + "= new int[" + exp.get(0) + "];\n");
        this.g.current_scope.putVariable(var, "int[]");

        _ret = (R)x;

        return _ret;
    }

    /**
     * f0 -> "new"
     * f1 -> Identifier()
     * f2 -> "("
     * f3 -> ")"
     */
    public R visit(AllocationExpression n, A argu) {
        R _ret = null;
        n.f0.accept(this, argu);
        ArrayList<String> id = (ArrayList<String>)n.f1.accept(this, argu);
        n.f2.accept(this, argu);
        n.f3.accept(this, argu);

        String var = this.newTemp();
        ArrayList<String> x = new ArrayList<String>();
        x.add(var);
        x.add(var+" = new "+id.get(0)+"();\n");
        this.g.current_scope.putVariable(var, id.get(0));

        _ret = (R)x;

        return _ret;
    }

    /**
     * f0 -> "!"
     * f1 -> ( MessageSend() | PrimaryExpression() )
     */
    public R visit(NotExpression n, A argu) {
        R _ret = null;
        n.f0.accept(this, argu);
        ArrayList<String> exp = (ArrayList<String>)n.f1.choice.accept(this, argu);
        String var = this.newTemp();
        ArrayList<String> x = new ArrayList<String>();
        x.add(var);
        x.add(exp.get(1)+var+"= !"+exp.get(0)+";\n");
        this.g.current_scope.putVariable(var, "boolean");

        _ret = (R)x;

        return _ret;
    }

    /**
     * f0 -> "("
     * f1 -> Expression()
     * f2 -> ")"
     */
    public R visit(BracketExpression n, A argu) {
        R _ret = null;
        n.f0.accept(this, argu);
        _ret = n.f1.accept(this, argu);
        n.f2.accept(this, argu);
        return _ret;
    }

}
