//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;
import java.util.*;
import helper.*;

/*
    First build CFG beginning with the loop.
    
    Add dummy assignment statements for each variable used in the loop.

    Then perform reaching definitions analysis.
    Then for each annotated assignment, for each variable in the RHS, check if 
    there exists multiple reaching definitions for that variable at that line.

*/

public class LoopInvariantCode<R, A> implements GJVisitor<R, A> {
    
    ArrayList<LoopAssignmentStmt> initStmts;
    ArrayList<LoopAssignmentStmt> loopStmts;
    ArrayList<LoopAssignmentStmt> annotatedLoopStmts;

    boolean inLoop = false;

    BlockLine previous; // used for adding predecessor/successor relation

    ArrayList<String> allVars;
    ArrayList<String> classVars;

    public R visit(NodeList n, A argu) {
        R _ret = null;
        int _count = 0;
        for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            e.nextElement().accept(this, argu);
            _count++;
        }
        return _ret;
    }

    public R visit(NodeListOptional n, A argu) {
        if ( n.present() ) {
            R _ret = null;
            int _count = 0;
            for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
                e.nextElement().accept(this, argu);
                _count++;
            }
            return _ret;
        } else
            return null;
    }

    public R visit(NodeOptional n, A argu) {
        if ( n.present() )
            return n.node.accept(this, argu);
        else
            return null;
    }

    public R visit(NodeSequence n, A argu) {
        R _ret = null;
        int _count = 0;
        for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            e.nextElement().accept(this, argu);
            _count++;
        }
        return _ret;
    }

    public R visit(NodeToken n, A argu) { 
        if(argu.toString().equals("print"))
            System.out.print(n.tokenImage);
        return null; 
    }

    //
    // User-generated visitor methods below
    //

    /**
     * f0 -> MainClass()
     * f1 -> ( TypeDeclaration() )*
     * f2 -> <EOF>
     */
    public R visit(Goal n, A argu) {
        R _ret = null;
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        n.f2.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> "class"
     * f1 -> Identifier()
     * f2 -> "{"
     * f3 -> "public"
     * f4 -> "static"
     * f5 -> "void"
     * f6 -> "main"
     * f7 -> "("
     * f8 -> "String"
     * f9 -> "["
     * f10 -> "]"
     * f11 -> Identifier()
     * f12 -> ")"
     * f13 -> "{"
     * f14 -> ( VarDeclaration() )*
     * f15 -> ( Statement() )*
     * f16 -> "}"
     * f17 -> "}"
     */
    public R visit(MainClass n, A argu) {
        R _ret = null;
        
        this.allVars = new ArrayList<String>();
        this.classVars = new ArrayList<String>();
        n.f14.accept(this, (A)"allVars");

        n.f15.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> ClassDeclaration()
     *       | ClassExtendsDeclaration()
     */
    public R visit(TypeDeclaration n, A argu) {
        R _ret = null;
        n.f0.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> "class"
     * f1 -> Identifier()
     * f2 -> "{"
     * f3 -> ( VarDeclaration() )*
     * f4 -> ( MethodDeclaration() )*
     * f5 -> "}"
     */
    public R visit(ClassDeclaration n, A argu) {
        R _ret = null;
        // n.f0.accept(this, argu);
        // n.f1.accept(this, argu);
        // n.f2.accept(this, argu);

        this.classVars = new ArrayList<String>();

        n.f3.accept(this, (A)"classVars");
        n.f4.accept(this, argu);
        // n.f5.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> "class"
     * f1 -> Identifier()
     * f2 -> "extends"
     * f3 -> Identifier()
     * f4 -> "{"
     * f5 -> ( VarDeclaration() )*
     * f6 -> ( MethodDeclaration() )*
     * f7 -> "}"
     */
    public R visit(ClassExtendsDeclaration n, A argu) {
        R _ret = null;
        // n.f0.accept(this, argu);
        // n.f1.accept(this, argu);
        // n.f2.accept(this, argu);
        // n.f3.accept(this, argu);
        // n.f4.accept(this, argu);

        this.classVars = new ArrayList<String>();

        n.f5.accept(this, (A)"classVars");
        n.f6.accept(this, argu);
        // n.f7.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> Type()
     * f1 -> Identifier()
     * f2 -> ";"
     */
    public R visit(VarDeclaration n, A argu) {
        R _ret = null;
        n.f0.accept(this, argu);
        String id = n.f1.accept(this, argu).toString();

        if(argu.toString().equals("allVars")){
            this.allVars.add(id);
        }
        else
        if(argu.toString().equals("classVars")){
            this.classVars.add(id);
        }

        n.f2.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> "public"
     * f1 -> Type()
     * f2 -> Identifier()
     * f3 -> "("
     * f4 -> ( FormalParameterList() )?
     * f5 -> ")"
     * f6 -> "{"
     * f7 -> ( VarDeclaration() )*
     * f8 -> ( Statement() )*
     * f9 -> "return"
     * f10 -> Identifier()
     * f11 -> ";"
     * f12 -> "}"
     */
    public R visit(MethodDeclaration n, A argu) {
        R _ret = null;
        // n.f0.accept(this, argu);
        // n.f1.accept(this, argu);
        // n.f2.accept(this, argu);
        // n.f3.accept(this, argu);
        
        this.allVars = new ArrayList<String>(this.classVars); // copy constructor
        n.f4.accept(this, (A)"allVars");

        // n.f5.accept(this, argu);
        // n.f6.accept(this, argu);
        n.f7.accept(this, (A)"allVars");
        n.f8.accept(this, argu);
        // n.f9.accept(this, argu);
        // n.f10.accept(this, argu);
        // n.f11.accept(this, argu);
        // n.f12.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> FormalParameter()
     * f1 -> ( FormalParameterRest() )*
     */
    public R visit(FormalParameterList n, A argu) {
        R _ret = null;
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> Type()
     * f1 -> Identifier()
     */
    public R visit(FormalParameter n, A argu) {
        R _ret = null;
        n.f0.accept(this, argu);
        String id = n.f1.accept(this, argu).toString();

        if(argu.toString().equals("allVars"))
            this.allVars.add(id);

        return _ret;
    }

    /**
     * f0 -> ","
     * f1 -> FormalParameter()
     */
    public R visit(FormalParameterRest n, A argu) {
        R _ret = null;
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> ArrayType()
     *       | BooleanType()
     *       | IntegerType()
     *       | Identifier()
     */
    public R visit(Type n, A argu) {
        R _ret = null;
        n.f0.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> "int"
     * f1 -> "["
     * f2 -> "]"
     */
    public R visit(ArrayType n, A argu) {
        R _ret = null;
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        n.f2.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> "boolean"
     */
    public R visit(BooleanType n, A argu) {
        R _ret = null;
        n.f0.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> "int"
     */
    public R visit(IntegerType n, A argu) {
        R _ret = null;
        n.f0.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> Block()
     *       | AssignmentStatements()
     *       | IfStatement()
     *       | WhileStatement()
     *       | ForStatement()
     *       | PrintStatement()
     */
    public R visit(Statement n, A argu) {
        R _ret = null;
        n.f0.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> ( LICAnn() )?
     * f1 -> ( AssignmentStatement() | ArrayAssignmentStatement() | FieldAssignmentStatement() )
     */
    public R visit(AssignmentStatements n, A argu) {
        R _ret = null;
        
        if(this.inLoop){
            // n.f0.accept(this, argu);    
            LoopAssignmentStmt las = (LoopAssignmentStmt)n.f1.accept(this, argu);
            if(las!=null)
            {
                if(n.f0.present()){
                    las.annotated = true;
                    this.annotatedLoopStmts.add(las);
                }
            }
        }
        
        return _ret;
    }

    /**
     * f0 -> <SCOMMENT1>
     * f1 -> <LIC>
     * f2 -> <SCOMMENT2>
     */
    public R visit(LICAnn n, A argu) {
        R _ret = null;
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        n.f2.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> "{"
     * f1 -> ( Statement() )*
     * f2 -> "}"
     */
    public R visit(Block n, A argu) {
        R _ret = null;
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        n.f2.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> Identifier()
     * f1 -> "="
     * f2 -> Expression()
     * f3 -> ";"
     */
    public R visit(AssignmentStatement n, A argu) {
        R _ret = null;
        
        if(this.inLoop){
            String id = n.f0.accept(this, argu).toString();
            // n.f1.accept(this, argu);
            // n.f2.accept(this, argu);
            // n.f3.accept(this, argu);

            LoopAssignmentStmt las = new LoopAssignmentStmt(id, 0);
            las.rhs = n.f2;

            BlockLine b = new BlockLine();
            b.predecessors.add(this.previous);
            this.previous.successors.add(b);
            this.previous = b;

            b.las = las;
            las.block = b;

            this.loopStmts.add(las);

            return (R)las;    
        }

        return _ret;
    }

    /**
     * f0 -> Identifier()
     * f1 -> "["
     * f2 -> Identifier()
     * f3 -> "]"
     * f4 -> "="
     * f5 -> ConstOrId()
     * f6 -> ";"
     */
    public R visit(ArrayAssignmentStatement n, A argu) {
        R _ret = null;

        if(this.inLoop){
            String id1 = n.f0.accept(this, argu).toString();
            String id2 = n.f2.accept(this, argu).toString();
            
            // n.f5.accept(this, argu);
            LoopAssignmentStmt las = new LoopAssignmentStmt(id1+"["+id2+"]", 1);
            las.rhs = n.f5;

            BlockLine b = new BlockLine();
            b.las = las;
            las.block = b;
            this.previous.successors.add(b);
            b.predecessors.add(this.previous);

            this.previous = b;
            this.loopStmts.add(las);    

            return (R)las;
        }

        return _ret;
    }

    /**
     * f0 -> Identifier()
     * f1 -> "."
     * f2 -> Identifier()
     * f3 -> "="
     * f4 -> Identifier()
     * f5 -> ";"
     */
    public R visit(FieldAssignmentStatement n, A argu) {
        R _ret = null;

        if(this.inLoop){

            String id1 = n.f0.accept(this, argu).toString();
            String id2 = n.f2.accept(this, argu).toString();
            // n.f4.accept(this, argu);
            LoopAssignmentStmt las = new LoopAssignmentStmt(id1+"."+id2, 2);
            las.rhs = n.f4;

            BlockLine b = new BlockLine();
            b.predecessors.add(this.previous);
            this.previous.successors.add(b);

            b.las = las;
            las.block = b;

            this.previous = b;    
            this.loopStmts.add(las);

            return (R)las;
        }
        
        return _ret;
    }

    /**
     * f0 -> "if"
     * f1 -> "("
     * f2 -> Identifier()
     * f3 -> ")"
     * f4 -> Statement()
     * f5 -> "else"
     * f6 -> Statement()
     */
    public R visit(IfStatement n, A argu) {
        R _ret = null;

        if(this.inLoop){
            BlockLine entry = new BlockLine();
            this.previous.successors.add(entry);
            entry.predecessors.add(this.previous);
            this.previous = entry;

            n.f4.accept(this, argu);
            
            BlockLine post_then = new BlockLine();
            post_then.predecessors.add(this.previous);
            this.previous.successors.add(post_then);

            this.previous = entry;

            // n.f5.accept(this, argu);

            n.f6.accept(this, argu);

            BlockLine post_else = new BlockLine();
            post_else.predecessors.add(this.previous);
            this.previous.successors.add(post_else);

            BlockLine exit = new BlockLine();
            post_else.successors.add(exit);
            exit.predecessors.add(post_else);
            exit.predecessors.add(post_then);
            post_then.successors.add(exit);

            this.previous = exit;
        }
        

        return _ret;
    }

    /**
     * f0 -> "while"
     * f1 -> "("
     * f2 -> Identifier()
     * f3 -> ")"
     * f4 -> Statement()
     */
    public R visit(WhileStatement n, A argu) {
        R _ret = null;
        // n.f0.accept(this, argu);
        // n.f1.accept(this, argu);
        // n.f2.accept(this, argu);
        // n.f3.accept(this, argu);

        if(this.inLoop){
            
            BlockLine entry = new BlockLine();
            entry.predecessors.add(this.previous);
            this.previous.successors.add(entry);
            this.previous = entry;

            n.f4.accept(this, argu);

            BlockLine post_body = new BlockLine();
            post_body.predecessors.add(this.previous);
            this.previous.successors.add(post_body);

            BlockLine exit = new BlockLine();
            post_body.successors.add(exit);
            exit.predecessors.add(post_body);
            exit.predecessors.add(entry);
            entry.successors.add(exit);
            
            this.previous = exit;

            return _ret;       
        }

        this.inLoop = true;

        BlockLine startBlock = new BlockLine();
        this.previous = startBlock;

        this.loopStmts = new ArrayList<LoopAssignmentStmt>();
        this.annotatedLoopStmts = new ArrayList<LoopAssignmentStmt>();
        this.initStmts = new ArrayList<LoopAssignmentStmt>();

        HashMap<LoopAssignmentStmt, Boolean> initIn = new HashMap<LoopAssignmentStmt, Boolean>();

        for(String id: this.allVars){
            LoopAssignmentStmt las = new LoopAssignmentStmt(id);
            this.initStmts.add(las);
            las.insideLoop = false;
            initIn.put(las, true);
        }

        n.f4.accept(this, argu);

        BlockLine exit = new BlockLine();
        this.previous.successors.add(exit);
        exit.predecessors.add(this.previous);
        this.previous = exit;

        this.inLoop = false;

        for(LoopAssignmentStmt las:this.loopStmts){
            initIn.put(las, false);
            this.initStmts.add(las);
        }

        startBlock.inVals = initIn;

        reaching_definitions(startBlock);

        for(LoopAssignmentStmt l : this.annotatedLoopStmts){
            System.out.println(checkInvariance(l)?"Yes":"No");
        }

        return _ret;
    }


    void reaching_definitions(BlockLine startBlock){
        Queue<BlockLine> queue = new LinkedList<BlockLine>();

        for(int i = 0; i < 2 ; i++){
            for(BlockLine s:startBlock.successors)
                queue.add(s);
            startBlock.propagate();
            BlockLine b=null;
            while(queue.size()>0){
                b = queue.remove();
                for(BlockLine s:b.successors)
                    queue.add(s);
                
                HashMap<LoopAssignmentStmt, Boolean> temp = new HashMap<LoopAssignmentStmt, Boolean>();
                // initialization
                for(LoopAssignmentStmt las:this.initStmts){
                    temp.put(las, false);
                }

                for(BlockLine p:b.predecessors){
                    for(Map.Entry<LoopAssignmentStmt, Boolean> entry: p.outVals.entrySet()){
                        LoopAssignmentStmt las = entry.getKey();
                        boolean val = entry.getValue();
                        temp.put(las, temp.get(las)||val);
                    }
                }

                b.inVals = temp;

                // from IN to OUT
                b.propagate();
            }    
            for(Map.Entry<LoopAssignmentStmt, Boolean> entry: b.outVals.entrySet()){
                LoopAssignmentStmt las = entry.getKey();
                boolean val = entry.getValue();
                startBlock.inVals.put(las, startBlock.inVals.get(las)||val);
            }
        }
        
    }

    boolean checkInvariance(LoopAssignmentStmt las){ // returns true if invariant
        if(las.loopInvariant)
            return true;

        boolean flag = true;

        if(las.rhs!=null){
            R temp = las.rhs.accept(this, (A)"");
            if(temp!=null){
                ArrayList<String> vars;
                if(las.type==0){
                    vars = (ArrayList<String>)temp;
                }
                else{
                    vars = new ArrayList<String>();
                    vars.add(temp.toString());
                }

                for(String x:vars){
                    int ct = las.block.rdCount(x);
                    // System.out.println(ct);
                    if(ct>=2){
                        flag = false;
                        break;
                    }
                }

                if(!flag)
                    return false;

                for(String x:vars){
                    for(Map.Entry<LoopAssignmentStmt, Boolean> entry:las.block.inVals.entrySet()){
                        LoopAssignmentStmt l = entry.getKey();
                        boolean val = entry.getValue();
                        if(val && l.var.equals(x)){
                            flag = flag & checkInvariance(l);
                            break;
                        }
                    }
                    if(!flag)
                        break;    
                }
                

                las.loopInvariant = flag;
            }
        }
        return flag;
    }


    /**
     * f0 -> ( LoopAnnotation() )?
     * f1 -> "for"
     * f2 -> "("
     * f3 -> Identifier()
     * f4 -> "="
     * f5 -> Expression()
     * f6 -> ";"
     * f7 -> Expression()
     * f8 -> ";"
     * f9 -> Identifier()
     * f10 -> "="
     * f11 -> Expression()
     * f12 -> ")"
     * f13 -> Statement()
     */
    public R visit(ForStatement n, A argu) {
        R _ret = null;

        if(this.inLoop){
            
            BlockLine entry = new BlockLine();
            entry.predecessors.add(this.previous);
            this.previous.successors.add(entry);
            this.previous = entry;
            
            n.f13.accept(this, argu);

            String lcv = n.f9.accept(this, argu).toString();
            LoopAssignmentStmt las_lcv = new LoopAssignmentStmt(lcv);
            las_lcv.rhs = n.f11;
            BlockLine post_body = new BlockLine();

            post_body.las = las_lcv;
            las_lcv.block = post_body;

            this.loopStmts.add(las_lcv);

            post_body.predecessors.add(this.previous);
            this.previous.successors.add(post_body);

            BlockLine exit = new BlockLine();
            post_body.successors.add(exit);
            exit.predecessors.add(post_body);
            exit.predecessors.add(entry);
            entry.successors.add(exit);
            this.previous = exit;

            return _ret;
        }

        this.inLoop = true;

        BlockLine startBlock = new BlockLine();
        this.previous = startBlock;

        this.loopStmts = new ArrayList<LoopAssignmentStmt>();
        this.annotatedLoopStmts = new ArrayList<LoopAssignmentStmt>();
        this.initStmts = new ArrayList<LoopAssignmentStmt>();

        HashMap<LoopAssignmentStmt, Boolean> initIn = new HashMap<LoopAssignmentStmt, Boolean>();

        for(String id: this.allVars){
            LoopAssignmentStmt las = new LoopAssignmentStmt(id);
            this.initStmts.add(las);
            las.insideLoop = false;
            initIn.put(las, true);
        }

        n.f13.accept(this, argu);

        String lcv = n.f9.accept(this, argu).toString();
        // n.f10.accept(this, argu);
        // n.f11.accept(this, argu);

        LoopAssignmentStmt las_lcv = new LoopAssignmentStmt(lcv);
        las_lcv.rhs = n.f11;
        BlockLine block_lcv = new BlockLine();
        block_lcv.las = las_lcv;
        las_lcv.block = block_lcv;
        block_lcv.predecessors.add(this.previous);
        this.previous.successors.add(block_lcv);
        this.loopStmts.add(las_lcv);
        this.previous = block_lcv;

        this.inLoop = false;

        for(LoopAssignmentStmt las:this.loopStmts){
            initIn.put(las, false);
            this.initStmts.add(las);
        }

        startBlock.inVals = initIn;

        reaching_definitions(startBlock);

        // for(LoopAssignmentStmt l:this.loopStmts){
        //     System.out.println(l.var+":");
        //     for(Map.Entry<LoopAssignmentStmt, Boolean> entry: l.block.inVals.entrySet()){
        //         LoopAssignmentStmt m = entry.getKey();
        //         // if(m.insideLoop){
        //         //     System.out.println("\t"+m.var+":"+entry.getValue());
        //         // }
        //         // System.out.print("\t"+m.var+":"+entry.getValue()+", inside: "+m.insideLoop+" ");
        //         if(m.rhs!=null){
        //             System.out.print("\t"+m.var+"=");
        //             m.rhs.accept(this, (A)"print");
        //             System.out.print(" ");
        //         }
        //         else
        //             System.out.print("\t"+m.var+":");

        //         System.out.println(entry.getValue());
        //     }
        //     System.out.println("");
        // }

        for(LoopAssignmentStmt l : this.annotatedLoopStmts){
            System.out.println(checkInvariance(l)?"Yes":"No");
        }

        return _ret;
    }

    /**
     * f0 -> IndependentIters()
     */
    public R visit(LoopAnnotation n, A argu) {
        R _ret = null;
        n.f0.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> <SCOMMENT1>
     * f1 -> <INDEPENDENTITERS>
     * f2 -> <SCOMMENT2>
     */
    public R visit(IndependentIters n, A argu) {
        R _ret = null;
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        n.f2.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> "System.out.println"
     * f1 -> "("
     * f2 -> Identifier()
     * f3 -> ")"
     * f4 -> ";"
     */
    public R visit(PrintStatement n, A argu) {
        R _ret = null;
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        n.f2.accept(this, argu);
        n.f3.accept(this, argu);
        n.f4.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> AndExpression()
     *       | CompareExpression()
     *       | PlusExpression()
     *       | MinusExpression()
     *       | TimesExpression()
     *       | ArrayLookup()
     *       | ArrayLength()
     *       | MessageSend()
     *       | PrimaryExpression()
     */
    public R visit(Expression n, A argu) {
        R _ret = null;
        _ret = n.f0.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> Identifier()
     * f1 -> "&"
     * f2 -> Identifier()
     */
    public R visit(AndExpression n, A argu) {
        R _ret = null;
        String x1 = n.f0.accept(this, argu).toString();
        n.f1.accept(this, argu);
        String x2 = n.f2.accept(this, argu).toString();

        ArrayList<String> vars = new ArrayList<String>();
        vars.add(x1);
        vars.add(x2);

        _ret = (R)vars;

        return _ret;
    }

    /**
     * f0 -> ConstOrId()
     * f1 -> "<"
     * f2 -> ConstOrId()
     */
    public R visit(CompareExpression n, A argu) {
        R _ret = null;
        String x1 = n.f0.accept(this, argu).toString();
        n.f1.accept(this, argu);
        String x2 = n.f2.accept(this, argu).toString();

        ArrayList<String> vars = new ArrayList<String>();
        vars.add(x1);
        vars.add(x2);

        _ret = (R)vars;

        return _ret;
    }

    /**
     * f0 -> ConstOrId()
     * f1 -> "+"
     * f2 -> ConstOrId()
     */
    public R visit(PlusExpression n, A argu) {
        R _ret = null;
        String x1 = n.f0.accept(this, argu).toString();
        n.f1.accept(this, argu);
        String x2 = n.f2.accept(this, argu).toString();

        ArrayList<String> vars = new ArrayList<String>();
        vars.add(x1);
        vars.add(x2);

        _ret = (R)vars;

        return _ret;
    }

    /**
     * f0 -> ConstOrId()
     * f1 -> "-"
     * f2 -> ConstOrId()
     */
    public R visit(MinusExpression n, A argu) {
        R _ret = null;
        String x1 = n.f0.accept(this, argu).toString();
        n.f1.accept(this, argu);
        String x2 = n.f2.accept(this, argu).toString();

        ArrayList<String> vars = new ArrayList<String>();
        vars.add(x1);
        vars.add(x2);

        _ret = (R)vars;

        return _ret;
    }

    /**
     * f0 -> ConstOrId()
     * f1 -> "*"
     * f2 -> ConstOrId()
     */
    public R visit(TimesExpression n, A argu) {
        R _ret = null;
        String x1 = n.f0.accept(this, argu).toString();
        n.f1.accept(this, argu);
        String x2 = n.f2.accept(this, argu).toString();

        ArrayList<String> vars = new ArrayList<String>();
        vars.add(x1);
        vars.add(x2);

        _ret = (R)vars;

        return _ret;
    }

    /**
     * f0 -> Identifier()
     * f1 -> "["
     * f2 -> Identifier()
     * f3 -> "]"
     */
    public R visit(ArrayLookup n, A argu) {
        R _ret = null;
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        n.f2.accept(this, argu);
        n.f3.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> Identifier()
     * f1 -> "."
     * f2 -> "length"
     */
    public R visit(ArrayLength n, A argu) {
        R _ret = null;
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        n.f2.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> PrimaryExpression()
     * f1 -> "."
     * f2 -> Identifier()
     * f3 -> "("
     * f4 -> ( ArgList() )?
     * f5 -> ")"
     */
    public R visit(MessageSend n, A argu) {
        R _ret = null;
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        n.f2.accept(this, argu);
        n.f3.accept(this, argu);
        n.f4.accept(this, argu);
        n.f5.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> Identifier()
     * f1 -> ( ArgRest() )*
     */
    public R visit(ArgList n, A argu) {
        R _ret = null;
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> ","
     * f1 -> Identifier()
     */
    public R visit(ArgRest n, A argu) {
        R _ret = null;
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> IntegerLiteral()
     *       | TrueLiteral()
     *       | FalseLiteral()
     *       | Identifier()
     *       | ThisExpression()
     *       | ArrayAllocationExpression()
     *       | AllocationExpression()
     *       | NotExpression()
     */
    public R visit(PrimaryExpression n, A argu) {
        R _ret = null;
        R temp = n.f0.accept(this, argu);

        ArrayList<String> vars = new ArrayList<String>();
        if(temp!=null){
            String x = temp.toString();
            vars.add(x);
            _ret = (R)vars;
        }

        return _ret;
    }

    /**
     * f0 -> <INTEGER_LITERAL>
     */
    public R visit(IntegerLiteral n, A argu) {
        R _ret = null;
        n.f0.accept(this, argu);
        _ret = (R)n.f0.tokenImage;
        return _ret;
    }

    /**
     * f0 -> "true"
     */
    public R visit(TrueLiteral n, A argu) {
        R _ret = null;
        n.f0.accept(this, argu);
        _ret = (R)"true";
        return _ret;
    }

    /**
     * f0 -> "false"
     */
    public R visit(FalseLiteral n, A argu) {
        R _ret = null;
        n.f0.accept(this, argu);
        _ret = (R)"false";
        return _ret;
    }

    /**
     * f0 -> <IDENTIFIER>
     */
    public R visit(Identifier n, A argu) {
        R _ret = null;
        n.f0.accept(this, argu);
        _ret = (R)n.f0.tokenImage;
        return _ret;
    }

    /**
     * f0 -> Identifier()
     *       | IntegerLiteral()
     *       | TrueLiteral()
     *       | FalseLiteral()
     */
    public R visit(ConstOrId n, A argu) {
        R _ret = null;
        _ret = n.f0.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> "this"
     */
    public R visit(ThisExpression n, A argu) {
        R _ret = null;
        n.f0.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> "new"
     * f1 -> "int"
     * f2 -> "["
     * f3 -> Identifier()
     * f4 -> "]"
     */
    public R visit(ArrayAllocationExpression n, A argu) {
        R _ret = null;
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        n.f2.accept(this, argu);
        n.f3.accept(this, argu);
        n.f4.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> "new"
     * f1 -> Identifier()
     * f2 -> "("
     * f3 -> ")"
     */
    public R visit(AllocationExpression n, A argu) {
        R _ret = null;
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        n.f2.accept(this, argu);
        n.f3.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> "!"
     * f1 -> Identifier()
     */
    public R visit(NotExpression n, A argu) {
        R _ret = null;
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        return _ret;
    }

}
