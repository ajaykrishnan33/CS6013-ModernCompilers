//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;
import java.util.*;
import helper.*;

public class LoopIndependentIters<R, A> implements GJVisitor<R, A> {
    //
    // Auto class visitors--probably don't need to be overridden.
    //

    int loopLevel = 0;

    ArrayList<LoopAssignmentStmt> loopStmts;
    ArrayList<ArrayAccessStmt> arrayStmts;

    HashMap<String, LoopAssignmentStmt> varMap;

    public void print(String x){
        System.out.println(x);
    }

    public R visit(NodeList n, A argu) {
        R _ret = null;
        int _count = 0;
        for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            e.nextElement().accept(this, argu);
            _count++;
        }
        return _ret;
    }

    public R visit(NodeListOptional n, A argu) {
        if ( n.present() ) {
            R _ret = null;
            int _count = 0;
            for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
                e.nextElement().accept(this, argu);
                _count++;
            }
            return _ret;
        } else
            return null;
    }

    public R visit(NodeOptional n, A argu) {
        if ( n.present() )
            return n.node.accept(this, argu);
        else
            return null;
    }

    public R visit(NodeSequence n, A argu) {
        R _ret = null;
        int _count = 0;
        for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            e.nextElement().accept(this, argu);
            _count++;
        }
        return _ret;
    }

    public R visit(NodeToken n, A argu) { return null; }

    //
    // User-generated visitor methods below
    //

    /**
     * f0 -> MainClass()
     * f1 -> ( TypeDeclaration() )*
     * f2 -> <EOF>
     */
    public R visit(Goal n, A argu) {
        R _ret = null;
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        n.f2.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> "class"
     * f1 -> Identifier()
     * f2 -> "{"
     * f3 -> "public"
     * f4 -> "static"
     * f5 -> "void"
     * f6 -> "main"
     * f7 -> "("
     * f8 -> "String"
     * f9 -> "["
     * f10 -> "]"
     * f11 -> Identifier()
     * f12 -> ")"
     * f13 -> "{"
     * f14 -> ( VarDeclaration() )*
     * f15 -> ( Statement() )*
     * f16 -> "}"
     * f17 -> "}"
     */
    public R visit(MainClass n, A argu) {
        R _ret = null;
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        n.f2.accept(this, argu);
        n.f3.accept(this, argu);
        n.f4.accept(this, argu);
        n.f5.accept(this, argu);
        n.f6.accept(this, argu);
        n.f7.accept(this, argu);
        n.f8.accept(this, argu);
        n.f9.accept(this, argu);
        n.f10.accept(this, argu);
        n.f11.accept(this, argu);
        n.f12.accept(this, argu);
        n.f13.accept(this, argu);
        n.f14.accept(this, argu);
        n.f15.accept(this, argu);
        n.f16.accept(this, argu);
        n.f17.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> ClassDeclaration()
     *       | ClassExtendsDeclaration()
     */
    public R visit(TypeDeclaration n, A argu) {
        R _ret = null;
        n.f0.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> "class"
     * f1 -> Identifier()
     * f2 -> "{"
     * f3 -> ( VarDeclaration() )*
     * f4 -> ( MethodDeclaration() )*
     * f5 -> "}"
     */
    public R visit(ClassDeclaration n, A argu) {
        R _ret = null;
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        n.f2.accept(this, argu);
        n.f3.accept(this, argu);
        n.f4.accept(this, argu);
        n.f5.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> "class"
     * f1 -> Identifier()
     * f2 -> "extends"
     * f3 -> Identifier()
     * f4 -> "{"
     * f5 -> ( VarDeclaration() )*
     * f6 -> ( MethodDeclaration() )*
     * f7 -> "}"
     */
    public R visit(ClassExtendsDeclaration n, A argu) {
        R _ret = null;
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        n.f2.accept(this, argu);
        n.f3.accept(this, argu);
        n.f4.accept(this, argu);
        n.f5.accept(this, argu);
        n.f6.accept(this, argu);
        n.f7.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> Type()
     * f1 -> Identifier()
     * f2 -> ";"
     */
    public R visit(VarDeclaration n, A argu) {
        R _ret = null;
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        n.f2.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> "public"
     * f1 -> Type()
     * f2 -> Identifier()
     * f3 -> "("
     * f4 -> ( FormalParameterList() )?
     * f5 -> ")"
     * f6 -> "{"
     * f7 -> ( VarDeclaration() )*
     * f8 -> ( Statement() )*
     * f9 -> "return"
     * f10 -> Identifier()
     * f11 -> ";"
     * f12 -> "}"
     */
    public R visit(MethodDeclaration n, A argu) {
        R _ret = null;
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        n.f2.accept(this, argu);
        n.f3.accept(this, argu);
        n.f4.accept(this, argu);
        n.f5.accept(this, argu);
        n.f6.accept(this, argu);
        n.f7.accept(this, argu);
        n.f8.accept(this, argu);
        n.f9.accept(this, argu);
        n.f10.accept(this, argu);
        n.f11.accept(this, argu);
        n.f12.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> FormalParameter()
     * f1 -> ( FormalParameterRest() )*
     */
    public R visit(FormalParameterList n, A argu) {
        R _ret = null;
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> Type()
     * f1 -> Identifier()
     */
    public R visit(FormalParameter n, A argu) {
        R _ret = null;
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> ","
     * f1 -> FormalParameter()
     */
    public R visit(FormalParameterRest n, A argu) {
        R _ret = null;
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> ArrayType()
     *       | BooleanType()
     *       | IntegerType()
     *       | Identifier()
     */
    public R visit(Type n, A argu) {
        R _ret = null;
        n.f0.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> "int"
     * f1 -> "["
     * f2 -> "]"
     */
    public R visit(ArrayType n, A argu) {
        R _ret = null;
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        n.f2.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> "boolean"
     */
    public R visit(BooleanType n, A argu) {
        R _ret = null;
        n.f0.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> "int"
     */
    public R visit(IntegerType n, A argu) {
        R _ret = null;
        n.f0.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> Block()
     *       | AssignmentStatements()
     *       | IfStatement()
     *       | WhileStatement()
     *       | ForStatement()
     *       | PrintStatement()
     */
    public R visit(Statement n, A argu) {
        R _ret = null;
        n.f0.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> ( LICAnn() )?
     * f1 -> ( AssignmentStatement() | ArrayAssignmentStatement() | FieldAssignmentStatement() )
     */
    public R visit(AssignmentStatements n, A argu) {
        R _ret = null;
        // n.f0.accept(this, argu);
        n.f1.accept(this, argu);        

        return _ret;
    }

    /**
     * f0 -> <SCOMMENT1>
     * f1 -> <LIC>
     * f2 -> <SCOMMENT2>
     */
    public R visit(LICAnn n, A argu) {
        R _ret = null;
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        n.f2.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> "{"
     * f1 -> ( Statement() )*
     * f2 -> "}"
     */
    public R visit(Block n, A argu) {
        R _ret = null;
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        n.f2.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> Identifier()
     * f1 -> "="
     * f2 -> Expression()
     * f3 -> ";"
     */
    public R visit(AssignmentStatement n, A argu) {
        R _ret = null;
        String id = n.f0.accept(this, argu).toString();
        // n.f1.accept(this, argu);
        // n.f2.accept(this, argu);
        // n.f3.accept(this, argu);

        if(argu.toString().equals("entry")){
            LoopAssignmentStmt las = new LoopAssignmentStmt(id, 0, n.f2);
            if(n.f2.f0.which==5){
                las.type = 1;
                las.aas = (ArrayAccessStmt)n.f2.f0.choice.accept(this, argu);
            }
            this.loopStmts.add(las);
        }

        return _ret;
    }

    /**
     * f0 -> Identifier()
     * f1 -> "["
     * f2 -> Identifier()
     * f3 -> "]"
     * f4 -> "="
     * f5 -> ConstOrId()
     * f6 -> ";"
     */
    public R visit(ArrayAssignmentStatement n, A argu) {
        R _ret = null;
        String arrName = n.f0.accept(this, argu).toString();
        n.f1.accept(this, argu);
        String id = n.f2.accept(this, argu).toString();
        n.f3.accept(this, argu);
        n.f4.accept(this, argu);
        n.f5.accept(this, argu);
        n.f6.accept(this, argu);

        if(argu.toString().equals("entry")){
            ArrayAccessStmt aas = new ArrayAccessStmt(arrName, id, "LHS");
            this.arrayStmts.add(aas);

            LoopAssignmentStmt las = new LoopAssignmentStmt(arrName, 1, n.f5);
            las.aas = aas;
            this.loopStmts.add(las);
        }

        return _ret;
    }

    /**
     * f0 -> Identifier()
     * f1 -> "."
     * f2 -> Identifier()
     * f3 -> "="
     * f4 -> Identifier()
     * f5 -> ";"
     */
    public R visit(FieldAssignmentStatement n, A argu) {
        R _ret = null;
        String id1 = n.f0.accept(this, argu).toString();
        n.f1.accept(this, argu);
        String id2 = n.f2.accept(this, argu).toString();
        n.f3.accept(this, argu);
        n.f4.accept(this, argu);
        n.f5.accept(this, argu);

        if(argu.toString().equals("entry")){
            LoopAssignmentStmt las = new LoopAssignmentStmt(id1+"."+id2, 2, n.f4);
            this.loopStmts.add(las);
        }

        return _ret;
    }

    /**
     * f0 -> "if"
     * f1 -> "("
     * f2 -> Identifier()
     * f3 -> ")"
     * f4 -> Statement()
     * f5 -> "else"
     * f6 -> Statement()
     */
    public R visit(IfStatement n, A argu) {
        R _ret = null;
        if(this.loopLevel>0)
            return _ret;
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        n.f2.accept(this, argu);
        n.f3.accept(this, argu);
        n.f4.accept(this, argu);
        n.f5.accept(this, argu);
        n.f6.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> "while"
     * f1 -> "("
     * f2 -> Identifier()
     * f3 -> ")"
     * f4 -> Statement()
     */
    public R visit(WhileStatement n, A argu) {
        R _ret = null;
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        n.f2.accept(this, argu);
        n.f3.accept(this, argu);

        if(this.loopLevel>0)
            return _ret;

        this.loopLevel++;
        n.f4.accept(this, argu);
        this.loopLevel--;
        
        return _ret;
    }

    private int gcd(int a, int b){
        int m = a>b?a:b;
        int n = a<b?a:b;

        if(n==0)
            return m;

        return gcd(n, m%n);
    }

    /**
     * f0 -> ( LoopAnnotation() )?
     * f1 -> "for"
     * f2 -> "("
     * f3 -> Identifier()
     * f4 -> "="
     * f5 -> Expression()
     * f6 -> ";"
     * f7 -> Expression()
     * f8 -> ";"
     * f9 -> Identifier()
     * f10 -> "="
     * f11 -> Expression()
     * f12 -> ")"
     * f13 -> Statement()
     */
    public R visit(ForStatement n, A argu) {
        R _ret = null;
        if(!n.f0.present())
        {
            return _ret;
        }

        // if loopLevel == 1, then we perform checks for independence and invariance

        String lcv = n.f3.accept(this, argu).toString(); // loop control variable
        
        // loop body
        if(n.f13.f0.which!=0){
            this.print("Yes");
            return _ret;
        }

        NodeListOptional statements = (NodeListOptional)(((Block)n.f13.f0.choice).f1); // Block
        if(!statements.present()){
            this.print("Yes");
            return _ret;
        }

        if(this.loopLevel>0)
            return _ret;

        loopStmts = new ArrayList<LoopAssignmentStmt>();
        arrayStmts = new ArrayList<ArrayAccessStmt>();
        varMap = new HashMap<String, LoopAssignmentStmt>();

        LoopAssignmentStmt lcv_las = new LoopAssignmentStmt(lcv, 0);
        lcv_las.a = 1;
        lcv_las.b = 0;
        lcv_las.indexRelated = true;
        varMap.put(lcv, lcv_las);

        this.loopLevel++; // entered loop
        n.f13.accept(this, (A)"entry");
        this.loopLevel--; // exit loop
        
        int i, j;
        
        for(i=0;i<loopStmts.size();i++){
            LoopAssignmentStmt las = loopStmts.get(i);

            if(las.type==2)
                continue;
            else
            if(las.type==1){
                if(varMap.containsKey(las.aas.indexVariable)){
                    las.aas.a = varMap.get(las.aas.indexVariable).a;
                    las.aas.b = varMap.get(las.aas.indexVariable).b;
                }
                continue;
            }

            R temp = ((Expression)las.rhs).accept(this, (A)"compute");
            if(temp!=null){
                ArrayList<Integer> res = (ArrayList<Integer>)temp;
                las.a = res.get(0);
                las.b = res.get(1);
                las.indexRelated = true;
                varMap.put(las.var, las);
            }
            else
            {
                las.indexRelated = false;
            }
        }

        ArrayAccessStmt a1=null, a2=null;
        int g=0,b=0;
        boolean flag = true;
        outer: for(i=1;i<arrayStmts.size();i++){
            a1 = arrayStmts.get(i);
            for(j=0;j<i;j++){
                a2 = arrayStmts.get(j);

                if(!a1.arrName.equals(a2.arrName))
                    continue;

                if(a1.side==1 && a2.side==1)
                    continue;

                if(a1.a!=0 || a2.a!=0){
                    g = gcd(a1.a, a2.a);
                    b = Math.abs(a1.b - a2.b);
                    if(b%g==0)
                    {
                        flag = false;
                        break outer;
                    }
                }
                else
                if(a1.b==a2.b)
                {
                    flag = false;
                    break outer;
                }
                
            }
        }
        System.out.println(flag?"Yes":"No");
        // System.out.println(flag?"Yes":"No");

        return _ret;
    }

    /**
     * f0 -> IndependentIters()
     */
    public R visit(LoopAnnotation n, A argu) {
        R _ret = null;
        n.f0.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> <SCOMMENT1>
     * f1 -> <INDEPENDENTITERS>
     * f2 -> <SCOMMENT2>
     */
    public R visit(IndependentIters n, A argu) {
        R _ret = null;
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        n.f2.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> "System.out.println"
     * f1 -> "("
     * f2 -> Identifier()
     * f3 -> ")"
     * f4 -> ";"
     */
    public R visit(PrintStatement n, A argu) {
        R _ret = null;
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        n.f2.accept(this, argu);
        n.f3.accept(this, argu);
        n.f4.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> AndExpression()
     *       | CompareExpression()
     *       | PlusExpression()
     *       | MinusExpression()
     *       | TimesExpression()
     *       | ArrayLookup()
     *       | ArrayLength()
     *       | MessageSend()
     *       | PrimaryExpression()
     */
    public R visit(Expression n, A argu) {
        R _ret = null;
        _ret = n.f0.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> Identifier()
     * f1 -> "&"
     * f2 -> Identifier()
     */
    public R visit(AndExpression n, A argu) {
        R _ret = null;
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        n.f2.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> ConstOrId()
     * f1 -> "<"
     * f2 -> ConstOrId()
     */
    public R visit(CompareExpression n, A argu) {
        R _ret = null;
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        n.f2.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> ConstOrId()
     * f1 -> "+"
     * f2 -> ConstOrId()
     */
    public R visit(PlusExpression n, A argu) {
        R _ret = null;
        String x1 = n.f0.accept(this, argu).toString();
        n.f1.accept(this, argu);
        String x2 = n.f2.accept(this, argu).toString();
        ArrayList<Integer> res = new ArrayList<Integer>();

        if(!argu.toString().equals("compute"))
            return _ret;

        if(n.f0.f0.which==1 && n.f2.f0.which==1){ // both are integers
            res.add(0);
            res.add((Integer.parseInt(x1) + Integer.parseInt(x2)));
        }
        else
        if(n.f0.f0.which==1 && varMap.containsKey(x2) && varMap.get(x2).indexRelated){ // x1 is integer
            res.add(varMap.get(x2).a);
            res.add(varMap.get(x2).b + Integer.parseInt(x1));
        }
        else
        if(n.f2.f0.which==1 && varMap.containsKey(x1) && varMap.get(x1).indexRelated){ // x2 is integer
            res.add(varMap.get(x1).a);
            res.add(varMap.get(x1).b + Integer.parseInt(x2));
        }
        else
        if(varMap.containsKey(x1) && varMap.get(x1).indexRelated && varMap.containsKey(x2) && varMap.get(x2).indexRelated)
        {
            res.add(varMap.get(x1).a + varMap.get(x2).a);
            res.add(varMap.get(x1).b + varMap.get(x2).b);
        }

        if(res.size()==2)
            _ret = (R)res;

        return _ret;
    }

    /**
     * f0 -> ConstOrId()
     * f1 -> "-"
     * f2 -> ConstOrId()
     */
    public R visit(MinusExpression n, A argu) {
        R _ret = null;
        String x1 = n.f0.accept(this, argu).toString();
        n.f1.accept(this, argu);
        String x2 = n.f2.accept(this, argu).toString();
        ArrayList<Integer> res = new ArrayList<Integer>();
        
        if(!argu.toString().equals("compute"))
            return _ret;

        if(n.f0.f0.which==1 && n.f2.f0.which==1){ // both are integers
            res.add(0);
            res.add(Integer.parseInt(x1) - Integer.parseInt(x2));
        }
        else
        if(n.f0.f0.which==1 && varMap.containsKey(x2) && varMap.get(x2).indexRelated){ // x1 is integer
            res.add(varMap.get(x2).a);
            res.add(Integer.parseInt(x1) - varMap.get(x2).b);
        }
        else
        if(n.f2.f0.which==1 && varMap.containsKey(x1) && varMap.get(x1).indexRelated){ // x2 is integer
            res.add(varMap.get(x1).a);
            res.add(varMap.get(x1).b - Integer.parseInt(x2));
        }
        else
        if(varMap.containsKey(x1) && varMap.get(x1).indexRelated && varMap.containsKey(x2) && varMap.get(x2).indexRelated)
        {
            res.add(varMap.get(x1).a - varMap.get(x2).a);
            res.add(varMap.get(x1).b - varMap.get(x2).b);
        }

        if(res.size()==2)
            _ret = (R)res;

        return _ret;
    }

    /**
     * f0 -> ConstOrId()
     * f1 -> "*"
     * f2 -> ConstOrId()
     */
    public R visit(TimesExpression n, A argu) {
        R _ret = null;
        String x1 = n.f0.accept(this, argu).toString();
        n.f1.accept(this, argu);
        String x2 = n.f2.accept(this, argu).toString();
        ArrayList<Integer> res = new ArrayList<Integer>();
        
        if(!argu.toString().equals("compute"))
            return _ret;

        if(n.f0.f0.which==1 && n.f2.f0.which==1){ // both are integers
            res.add(0);
            res.add(Integer.parseInt(x1) * Integer.parseInt(x2));
        }
        else
        if(n.f0.f0.which==1 && varMap.containsKey(x2) && varMap.get(x2).indexRelated){ // x1 is integer
            res.add(Integer.parseInt(x1) * varMap.get(x2).a);
            res.add(Integer.parseInt(x1) * varMap.get(x2).b);
        }
        else
        if(n.f2.f0.which==1 && varMap.containsKey(x1) && varMap.get(x1).indexRelated){ // x2 is integer
            res.add(varMap.get(x1).a * Integer.parseInt(x2));
            res.add(varMap.get(x1).b * Integer.parseInt(x2));
        }
        
        if(res.size()==2)
            _ret = (R)res;

        return _ret;
    }

    /**
     * f0 -> Identifier()
     * f1 -> "["
     * f2 -> Identifier()
     * f3 -> "]"
     */
    public R visit(ArrayLookup n, A argu) {
        R _ret = null;
        String arrName = n.f0.accept(this, argu).toString();
        n.f1.accept(this, argu);
        String index = n.f2.accept(this, argu).toString();
        n.f3.accept(this, argu);

        if(argu.toString().equals("entry")){
            ArrayAccessStmt aas = new ArrayAccessStmt(arrName, index, "RHS");
            arrayStmts.add(aas);
            _ret = (R)aas;
        }

        return _ret;
    }

    /**
     * f0 -> Identifier()
     * f1 -> "."
     * f2 -> "length"
     */
    public R visit(ArrayLength n, A argu) {
        R _ret = null;
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        n.f2.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> PrimaryExpression()
     * f1 -> "."
     * f2 -> Identifier()
     * f3 -> "("
     * f4 -> ( ArgList() )?
     * f5 -> ")"
     */
    public R visit(MessageSend n, A argu) {
        R _ret = null;
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        n.f2.accept(this, argu);
        n.f3.accept(this, argu);
        n.f4.accept(this, argu);
        n.f5.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> Identifier()
     * f1 -> ( ArgRest() )*
     */
    public R visit(ArgList n, A argu) {
        R _ret = null;
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> ","
     * f1 -> Identifier()
     */
    public R visit(ArgRest n, A argu) {
        R _ret = null;
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> IntegerLiteral()
     *       | TrueLiteral()
     *       | FalseLiteral()
     *       | Identifier()
     *       | ThisExpression()
     *       | ArrayAllocationExpression()
     *       | AllocationExpression()
     *       | NotExpression()
     */
    public R visit(PrimaryExpression n, A argu) {
        R _ret = null;
        R val = n.f0.accept(this, argu);
        if(val!=null){
            String var = val.toString();
            ArrayList<Integer> x = new ArrayList<Integer>();
            if(n.f0.which==3 && varMap.containsKey(var) && varMap.get(var).indexRelated){
                x.add(varMap.get(var).a);
                x.add(varMap.get(var).b);
                _ret = (R)x;
            }
            else
            if(n.f0.which==0){
                x.add(0);
                x.add(Integer.parseInt(var));
                _ret = (R)x;
            }
        }
        return _ret;
    }

    /**
     * f0 -> <INTEGER_LITERAL>
     */
    public R visit(IntegerLiteral n, A argu) {
        R _ret = null;
        _ret = (R)n.f0.tokenImage;
        return _ret;
    }

    /**
     * f0 -> "true"
     */
    public R visit(TrueLiteral n, A argu) {
        R _ret = null;
        n.f0.accept(this, argu);
        // _ret = (R)"true";
        return _ret;
    }

    /**
     * f0 -> "false"
     */
    public R visit(FalseLiteral n, A argu) {
        R _ret = null;
        n.f0.accept(this, argu);
        // _ret = (R)"false";
        return _ret;
    }

    /**
     * f0 -> <IDENTIFIER>
     */
    public R visit(Identifier n, A argu) {
        R _ret = null;
        _ret = (R)n.f0.tokenImage;
        return _ret;
    }

    /**
     * f0 -> Identifier()
     *       | IntegerLiteral()
     *       | TrueLiteral()
     *       | FalseLiteral()
     */
    public R visit(ConstOrId n, A argu) {
        R _ret = null;
        _ret = n.f0.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> "this"
     */
    public R visit(ThisExpression n, A argu) {
        R _ret = null;
        n.f0.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> "new"
     * f1 -> "int"
     * f2 -> "["
     * f3 -> Identifier()
     * f4 -> "]"
     */
    public R visit(ArrayAllocationExpression n, A argu) {
        R _ret = null;
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        n.f2.accept(this, argu);
        n.f3.accept(this, argu);
        n.f4.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> "new"
     * f1 -> Identifier()
     * f2 -> "("
     * f3 -> ")"
     */
    public R visit(AllocationExpression n, A argu) {
        R _ret = null;
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        n.f2.accept(this, argu);
        n.f3.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> "!"
     * f1 -> Identifier()
     */
    public R visit(NotExpression n, A argu) {
        R _ret = null;
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        return _ret;
    }

}
